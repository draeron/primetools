// Code generated by go-enum
// DO NOT EDIT!

package enums

import (
	"database/sql/driver"
	"fmt"
	"strings"
)

const (
	// Ratings is a SyncType of type Ratings
	Ratings SyncType = iota
	// Added is a SyncType of type Added
	Added
	// Modified is a SyncType of type Modified
	Modified
	// PlayCount is a SyncType of type PlayCount
	PlayCount
)

const _SyncTypeName = "RatingsAddedModifiedPlayCount"

var _SyncTypeNames = []string{
	_SyncTypeName[0:7],
	_SyncTypeName[7:12],
	_SyncTypeName[12:20],
	_SyncTypeName[20:29],
}

// SyncTypeNames returns a list of possible string values of SyncType.
func SyncTypeNames() []string {
	tmp := make([]string, len(_SyncTypeNames))
	copy(tmp, _SyncTypeNames)
	return tmp
}

var _SyncTypeMap = map[SyncType]string{
	0: _SyncTypeName[0:7],
	1: _SyncTypeName[7:12],
	2: _SyncTypeName[12:20],
	3: _SyncTypeName[20:29],
}

// String implements the Stringer interface.
func (x SyncType) String() string {
	if str, ok := _SyncTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("SyncType(%d)", x)
}

var _SyncTypeValue = map[string]SyncType{
	_SyncTypeName[0:7]:                    0,
	strings.ToLower(_SyncTypeName[0:7]):   0,
	_SyncTypeName[7:12]:                   1,
	strings.ToLower(_SyncTypeName[7:12]):  1,
	_SyncTypeName[12:20]:                  2,
	strings.ToLower(_SyncTypeName[12:20]): 2,
	_SyncTypeName[20:29]:                  3,
	strings.ToLower(_SyncTypeName[20:29]): 3,
}

// ParseSyncType attempts to convert a string to a SyncType
func ParseSyncType(name string) (SyncType, error) {
	if x, ok := _SyncTypeValue[name]; ok {
		return x, nil
	}
	return SyncType(0), fmt.Errorf("%s is not a valid SyncType, try [%s]", name, strings.Join(_SyncTypeNames, ", "))
}

// MarshalText implements the text marshaller method
func (x SyncType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *SyncType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseSyncType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Scan implements the Scanner interface.
func (x *SyncType) Scan(value interface{}) error {
	var name string

	switch v := value.(type) {
	case string:
		name = v
	case []byte:
		name = string(v)
	case nil:
		*x = SyncType(0)
		return nil
	}

	tmp, err := ParseSyncType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Value implements the driver Valuer interface.
func (x SyncType) Value() (driver.Value, error) {
	return x.String(), nil
}
