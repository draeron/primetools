// Code generated by go-enum
// DO NOT EDIT!

package enums

import (
	"database/sql/driver"
	"fmt"
	"strings"
)

const (
	// Tracks is a ObjectType of type Tracks
	Tracks ObjectType = iota
	// Playlists is a ObjectType of type Playlists
	Playlists
	// Crates is a ObjectType of type Crates
	Crates
)

const _ObjectTypeName = "TracksPlaylistsCrates"

var _ObjectTypeNames = []string{
	_ObjectTypeName[0:6],
	_ObjectTypeName[6:15],
	_ObjectTypeName[15:21],
}

// ObjectTypeNames returns a list of possible string values of ObjectType.
func ObjectTypeNames() []string {
	tmp := make([]string, len(_ObjectTypeNames))
	copy(tmp, _ObjectTypeNames)
	return tmp
}

var _ObjectTypeMap = map[ObjectType]string{
	0: _ObjectTypeName[0:6],
	1: _ObjectTypeName[6:15],
	2: _ObjectTypeName[15:21],
}

// String implements the Stringer interface.
func (x ObjectType) String() string {
	if str, ok := _ObjectTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ObjectType(%d)", x)
}

var _ObjectTypeValue = map[string]ObjectType{
	_ObjectTypeName[0:6]:                    0,
	strings.ToLower(_ObjectTypeName[0:6]):   0,
	_ObjectTypeName[6:15]:                   1,
	strings.ToLower(_ObjectTypeName[6:15]):  1,
	_ObjectTypeName[15:21]:                  2,
	strings.ToLower(_ObjectTypeName[15:21]): 2,
}

// ParseObjectType attempts to convert a string to a ObjectType
func ParseObjectType(name string) (ObjectType, error) {
	if x, ok := _ObjectTypeValue[name]; ok {
		return x, nil
	}
	return ObjectType(0), fmt.Errorf("%s is not a valid ObjectType, try [%s]", name, strings.Join(_ObjectTypeNames, ", "))
}

// MarshalText implements the text marshaller method
func (x ObjectType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *ObjectType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseObjectType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Scan implements the Scanner interface.
func (x *ObjectType) Scan(value interface{}) error {
	var name string

	switch v := value.(type) {
	case string:
		name = v
	case []byte:
		name = string(v)
	case nil:
		*x = ObjectType(0)
		return nil
	}

	tmp, err := ParseObjectType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Value implements the driver Valuer interface.
func (x ObjectType) Value() (driver.Value, error) {
	return x.String(), nil
}
