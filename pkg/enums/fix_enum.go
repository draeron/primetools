// Code generated by go-enum
// DO NOT EDIT!

package enums

import (
	"database/sql/driver"
	"fmt"
	"strings"
)

const (
	// Duplicate is a FixType of type Duplicate
	Duplicate FixType = iota
	// Missing is a FixType of type Missing
	Missing
)

const _FixTypeName = "DuplicateMissing"

var _FixTypeNames = []string{
	_FixTypeName[0:9],
	_FixTypeName[9:16],
}

// FixTypeNames returns a list of possible string values of FixType.
func FixTypeNames() []string {
	tmp := make([]string, len(_FixTypeNames))
	copy(tmp, _FixTypeNames)
	return tmp
}

var _FixTypeMap = map[FixType]string{
	0: _FixTypeName[0:9],
	1: _FixTypeName[9:16],
}

// String implements the Stringer interface.
func (x FixType) String() string {
	if str, ok := _FixTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("FixType(%d)", x)
}

var _FixTypeValue = map[string]FixType{
	_FixTypeName[0:9]:                   0,
	strings.ToLower(_FixTypeName[0:9]):  0,
	_FixTypeName[9:16]:                  1,
	strings.ToLower(_FixTypeName[9:16]): 1,
}

// ParseFixType attempts to convert a string to a FixType
func ParseFixType(name string) (FixType, error) {
	if x, ok := _FixTypeValue[name]; ok {
		return x, nil
	}
	return FixType(0), fmt.Errorf("%s is not a valid FixType, try [%s]", name, strings.Join(_FixTypeNames, ", "))
}

// MarshalText implements the text marshaller method
func (x FixType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *FixType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseFixType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Scan implements the Scanner interface.
func (x *FixType) Scan(value interface{}) error {
	var name string

	switch v := value.(type) {
	case string:
		name = v
	case []byte:
		name = string(v)
	case nil:
		*x = FixType(0)
		return nil
	}

	tmp, err := ParseFixType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Value implements the driver Valuer interface.
func (x FixType) Value() (driver.Value, error) {
	return x.String(), nil
}
