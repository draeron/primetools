// Code generated by go-enum
// DO NOT EDIT!

package enums

import (
	"database/sql/driver"
	"fmt"
	"strings"
)

const (
	// Auto is a FormatType of type Auto
	Auto FormatType = iota
	// Yaml is a FormatType of type Yaml
	Yaml
	// Json is a FormatType of type Json
	Json
	// Text is a FormatType of type Text
	Text
)

const _FormatTypeName = "AutoYamlJsonText"

var _FormatTypeNames = []string{
	_FormatTypeName[0:4],
	_FormatTypeName[4:8],
	_FormatTypeName[8:12],
	_FormatTypeName[12:16],
}

// FormatTypeNames returns a list of possible string values of FormatType.
func FormatTypeNames() []string {
	tmp := make([]string, len(_FormatTypeNames))
	copy(tmp, _FormatTypeNames)
	return tmp
}

var _FormatTypeMap = map[FormatType]string{
	0: _FormatTypeName[0:4],
	1: _FormatTypeName[4:8],
	2: _FormatTypeName[8:12],
	3: _FormatTypeName[12:16],
}

// String implements the Stringer interface.
func (x FormatType) String() string {
	if str, ok := _FormatTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("FormatType(%d)", x)
}

var _FormatTypeValue = map[string]FormatType{
	_FormatTypeName[0:4]:                    0,
	strings.ToLower(_FormatTypeName[0:4]):   0,
	_FormatTypeName[4:8]:                    1,
	strings.ToLower(_FormatTypeName[4:8]):   1,
	_FormatTypeName[8:12]:                   2,
	strings.ToLower(_FormatTypeName[8:12]):  2,
	_FormatTypeName[12:16]:                  3,
	strings.ToLower(_FormatTypeName[12:16]): 3,
}

// ParseFormatType attempts to convert a string to a FormatType
func ParseFormatType(name string) (FormatType, error) {
	if x, ok := _FormatTypeValue[name]; ok {
		return x, nil
	}
	return FormatType(0), fmt.Errorf("%s is not a valid FormatType, try [%s]", name, strings.Join(_FormatTypeNames, ", "))
}

// MarshalText implements the text marshaller method
func (x FormatType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *FormatType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseFormatType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Scan implements the Scanner interface.
func (x *FormatType) Scan(value interface{}) error {
	var name string

	switch v := value.(type) {
	case string:
		name = v
	case []byte:
		name = string(v)
	case nil:
		*x = FormatType(0)
		return nil
	}

	tmp, err := ParseFormatType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Value implements the driver Valuer interface.
func (x FormatType) Value() (driver.Value, error) {
	return x.String(), nil
}
